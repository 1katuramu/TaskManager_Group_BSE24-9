name: Optimized CI/CD Pipeline (Fixed)

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

env:
  NODE_VERSION: '18'

jobs:
  # Frontend Build and Test Job
  frontend:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./client
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js with caching
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install dependencies
      run: npm ci --prefer-offline
    
    - name: Run linting
      run: npm run lint
      continue-on-error: false
    
    - name: Run frontend tests with coverage
      run: npm test -- --coverage --watchAll=false --passWithNoTests
    
    - name: Build frontend
      run: npm run build
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ github.sha }}
        path: client/build/
        retention-days: 7
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage-${{ github.sha }}
        path: client/coverage/
        retention-days: 7

  # Backend Build and Test Job
  backend:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js with caching
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install dependencies
      run: npm ci --prefer-offline
    
    - name: Run backend tests
      run: npm test -- --passWithNoTests
    
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

  # Integration Tests Job
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install server dependencies
      working-directory: ./server
      run: npm ci --prefer-offline
    
    - name: Install client dependencies
      working-directory: ./client
      run: npm ci --prefer-offline
    
    - name: Download frontend build artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-${{ github.sha }}
        path: client/build/
    
    - name: Start backend server
      working-directory: ./server
      run: |
        npm start &
        echo $! > server.pid
        sleep 15
    
    - name: Wait for server to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done' || exit 1
    
    - name: Test API endpoints
      run: |
        echo "Testing API endpoints..."
        curl -f http://localhost:5000/ || (echo "‚ùå Root endpoint failed" && exit 1)
        curl -f http://localhost:5000/health || (echo "‚ùå Health endpoint failed" && exit 1)
        curl -f http://localhost:5000/tasks || (echo "‚ùå Tasks endpoint failed" && exit 1)
        echo "‚úÖ API integration tests completed"
    
    - name: Stop backend server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  # Code Quality Check Job
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Run code quality checks
      run: |
        echo "üîç Running code quality analysis..."
        echo "üìÅ Checking file structure..."
        JS_FILES=$(find . -name "*.js" -not -path "*/node_modules/*" -not -path "*/build/*" -not -path "*/coverage/*" | wc -l)
        echo "JavaScript files found: $JS_FILES"
        echo "‚úÖ Code quality analysis completed"

  # Performance Tests (only on main branch)
  performance-tests:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install server dependencies
      working-directory: ./server
      run: npm ci --prefer-offline
    
    - name: Start backend for performance testing
      working-directory: ./server
      run: |
        npm start &
        echo $! > server.pid
        sleep 15
    
    - name: Wait for server to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done' || exit 1
    
    - name: Run performance tests
      run: |
        echo "üöÄ Running performance tests..."
        TOTAL_TIME=0
        for i in {1..5}; do
          RESPONSE=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:5000/health)
          echo "Request $i: ${RESPONSE}s"
          TOTAL_TIME=$(echo "$TOTAL_TIME + $RESPONSE" | bc)
        done
        AVG_TIME=$(echo "scale=4; $TOTAL_TIME / 5" | bc)
        echo "Average response time: ${AVG_TIME}s"
        echo "‚úÖ Performance tests completed"
    
    - name: Stop backend server
      if: always()
      working-directory: ./server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  # Final validation and reporting
  validate:
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration-tests, code-quality]
    if: always()
    
    steps:
    - name: Check job statuses
      run: |
        echo "Frontend: ${{ needs.frontend.result }}"
        echo "Backend: ${{ needs.backend.result }}"
        echo "Integration: ${{ needs.integration-tests.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        
        if [[ "${{ needs.frontend.result }}" != "success" ]] || \
           [[ "${{ needs.backend.result }}" != "success" ]] || \
           [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
           [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "‚ùå Pipeline has failures"
          exit 1
        fi
    
    - name: Generate CI report
      if: always()
      run: |
        cat << EOF > ci-report.md
        # üìä Optimized CI/CD Pipeline Report
        
        ## Pipeline Status
        
        | Job | Status |
        |-----|--------|
        | Frontend | ${{ needs.frontend.result }} |
        | Backend | ${{ needs.backend.result }} |
        | Integration Tests | ${{ needs.integration-tests.result }} |
        | Code Quality | ${{ needs.code-quality.result }} |
        
        ## Optimization Features
        
        - ‚úÖ Parallel job execution
        - ‚úÖ Dependency caching (npm cache)
        - ‚úÖ Build artifact reuse
        - ‚úÖ Conditional performance testing (main branch only)
        - ‚úÖ Proper error handling and validation
        - ‚úÖ Server health checks before testing
        - ‚úÖ Proper cleanup of background processes
        
        ## Build Information
        
        - **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Commit:** ${{ github.sha }}
        - **Branch:** ${{ github.ref_name }}
        - **Triggered by:** ${{ github.event_name }}
        - **Actor:** ${{ github.actor }}
        
        ## Next Steps
        
        ${{ needs.frontend.result == 'success' && needs.backend.result == 'success' && needs.integration-tests.result == 'success' && '‚úÖ All checks passed - Ready for deployment!' || '‚ùå Some checks failed - Please review the logs' }}
        EOF
        
        cat ci-report.md
    
    - name: Upload CI report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ci-report-${{ github.sha }}
        path: ci-report.md
        retention-days: 30
